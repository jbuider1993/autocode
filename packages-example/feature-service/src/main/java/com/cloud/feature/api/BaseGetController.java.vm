package ${rootpackage}.api;

import io.swagger.annotations.ApiOperation;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import java.io.Serializable;
import java.util.List;
import java.util.Optional;
import javax.validation.Valid;

public interface BaseGetController<T, P extends Serializable> {

	@PreAuthorize("hasAuthority('can_read_user')")
    @RequestMapping(value = "{id}", method = RequestMethod.GET)
    @ApiOperation(value = "Search By ID",notes = "Search By ID")
	ResponseEntity<Optional<T>> get(@Valid @PathVariable("id") P id);

	@PreAuthorize("hasAuthority('can_read_user')")
    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Search All",notes = "Search All")
	ResponseEntity<List<T>> get();
	
	@PreAuthorize("hasAuthority('can_read_user')")
    @RequestMapping(value="pageable", method = RequestMethod.GET)
    @ApiOperation(value = "Pageable Search All",notes = "Pagable Search All")
	ResponseEntity<Page<T>> get(Pageable pageRequest);	

	/*
    @RequestMapping(value = "one", method = RequestMethod.GET)
    @ApiOperation(value = "Search By ID",notes = "Search By ID")
    T getCond(@Valid @ModelAttribute T bean);
    */
}
